?plot
library(ap)
library(ape)
?plot.phylo
library(devtools)
devtools::document()
devtools::document()
devtools::document()
devtools::install()
library(CRPTree)
library(CRPTree)
rcrp_tree(10, 5, 4)
library(ape)
rcrp_tree(10, 5, 4)
library(TreeTools)
rcrp_tree(10, 5, 4)
library(CRPTree)
?rcrp_tree
library(devtools)
devtools::document()
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
library(CRPTree)
set.seed(1234)
N <- 30
B <- 10
alpha <- 2
tree_ex <- rcrp_tree(N, B, alpha)
?read.tree
library(CRPTree)
devtools::document()
rcrp_tree(10, 5, 2)
library(CRPTree)
rcrp_tree(10, 5, 2)
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
library(CRPTree)
set.seed(1234)
N <- 30
B <- 10
alpha <- 2
tree_ex <- rcrp_tree(N, B, alpha)
plot_crp_tree(tree_ex)
plot_crp_tree(tree_ex, TRUE)
tree_ex_reorder <- reorder_branches(tree_ex, c(42, 43))
pcrp_tree(tree_ex, 1)
pcrp_tree(tree_ex, 2)
pcrp_tree(tree_ex, 5)
pnull_tree(tree_ex)
count_same_attachments(tree_ex)
s_0 <- compute_S_mean(tree_ex, 500)
s_0
S_obs <- simulate_S_observed(tree_ex, 50)
S_mean <- mean(S_obs)
S_tree_null <- simulate_S_tree_null(tree_ex, 50)
pval_tree <- mean(rbind(outer(S_tree_null, S_obs, '>='), rep(TRUE, length(S_obs))))
ggplot(as.data.frame(S_tree_null), aes(S_tree_null)) + geom_bar(color='black', fill='gray') + theme_light()+ xlab('S') + ggtitle('Approximate null distribution of S conditional on T_N')
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
library(CRPTree)
library(ggplot2)
set.seed(1234)
S_obs <- simulate_S_observed(tree_ex, 50)
S_mean <- mean(S_obs)
S_tree_null <- simulate_S_tree_null(tree_ex, 50)
pval_tree <- mean(rbind(outer(S_tree_null, S_obs, '>='), rep(TRUE, length(S_obs))))
ggplot(as.data.frame(S_tree_null), aes(S_tree_null)) + geom_bar(color='black', fill='gray') + theme_light()+ xlab('S') + ggtitle('Approximate null distribution of S conditional on T_N')
S_mean_null <- simulate_S_mean_tree(tree_ex, 50, 49)
pval_avg <- (1+ sum(S_mean_null >= S_mean))/(1+length(S_mean_null))
ggplot(as.data.frame(S_mean_null), aes(S_mean_null)) +
geom_histogram(color='black', fill='gray', bins=20) + theme_light()+
scale_x_continuous(limits=c(floor(min(S_mean_null)), ceiling(max(c(max(S_mean_null), S_mean))))) +
geom_vline(xintercept=S_mean, color='red') + xlab('S_0') +
ggtitle('Approximate null distribution of S_0, Red line is observed value')
one_tree_all_methods(tree_ex, 50, 49, 49)
one_tree_all_methods(tree_ex, 50, 49, 49, alt_methods = TRUE)
devtools::build_vignettes()
.Last.error.trace
devtools::build_vignettes()
devtools::document()
devtools::build_vignettes()
devtools::build_vignettes()
.Last.error.trace
library(devtools)
devtools:document()
devtools::document()
usethis::use_vignette()
devtools::build_vignettes()
.Last.error.trace
check()
document()
check()
document()
document()
devtools::build_vignettes()
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
library(CRPTree)
library(ggplot2)
set.seed(1234)
N <- 30
B <- 10
alpha <- 2
tree_ex <- rcrp_tree(N, B, alpha)
plot_crp_tree(tree_ex)
plot_crp_tree(tree_ex, TRUE)
.Last.error.trace
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
library(CRPTree)
library(ggplot2)
set.seed(1234)
data(ex_yfv)
ex_yfw
ex_yfv
system.file("extdata", package = "CRPTree")
library(devtools)
devtools::document()
devtools::document()
usethis::use_data_raw()
devtools::document()
rcrp_tree(10, 4,4)
data(ex_yfv)
one_tree_all_methods(tree_ex, 50, 49, 49, alt_methods = TRUE)
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
library(CRPTree)
library(ggplot2)
set.seed(1234)
N <- 30
B <- 10
alpha <- 2
tree_ex <- rcrp_tree(N, B, alpha)
plot_crp_tree(tree_ex)
plot_crp_tree(tree_ex, TRUE)
pcrp_tree(tree_ex, 1)
pcrp_tree(tree_ex, 2)
pcrp_tree(tree_ex, 5)
pnull_tree(tree_ex)
count_same_attachments(tree_ex)
s_0 <- compute_S_mean(tree_ex, 500)
s_0 <- compute_S_mean(tree_ex, 500)
s_0
S_obs <- simulate_S_observed(tree_ex, 50)
S_mean <- mean(S_obs)
S_tree_null <- simulate_S_tree_null(tree_ex, 50)
pval_tree <- mean(rbind(outer(S_tree_null, S_obs, '>='), rep(TRUE, length(S_obs))))
ggplot(as.data.frame(S_tree_null), aes(S_tree_null)) + geom_bar(color='black', fill='gray') + theme_light()+ xlab('S') + ggtitle('Approximate null distribution of S conditional on T_N')
S_mean_null <- simulate_S_mean_tree(tree_ex, 50, 49)
pval_avg <- (1+ sum(S_mean_null >= S_mean))/(1+length(S_mean_null))
ggplot(as.data.frame(S_mean_null), aes(S_mean_null)) +
geom_histogram(color='black', fill='gray', bins=20) + theme_light()+
scale_x_continuous(limits=c(floor(min(S_mean_null)), ceiling(max(c(max(S_mean_null), S_mean))))) +
geom_vline(xintercept=S_mean, color='red') + xlab('S_0') +
ggtitle('Approximate null distribution of S_0, Red line is observed value')
one_tree_all_methods(tree_ex, 50, 49, 49)
one_tree_all_methods(tree_ex, 50, 49, 49, alt_methods = TRUE)
alphas <- c(2,20)
crp_tree_power(tree_ex, alphas, num_sample= 50, num_pl=50, nperm_null = 30, nperm_labels=30)
data(ex_yfv)
yfv_post <- posterior_trees_pval(ex_yfv, 'Human')
devtools::document()
yfv_post <- posterior_trees_pval(ex_yfv, 'Human')
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
vignette("rd-other")
library(roxygen2)
vignette("rd-other")
usethis::use_package()
usethis::use_package('ape')
devtools::check()
devtools::check()
devtools::check()
Sys.info()
rcrp_tree(10,2,2)
usethis::use_vignette('Bayesian')
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
intToBin(3)
one_tree_all_methods(tree_ex, 50, 49, 49, alt_methods = TRUE)
alphas <- c(2,20)
crp_tree_power(tree_ex, alphas, num_sample= 50, num_pl=50, nperm_null = 30, nperm_labels=30)
count_partial_labels(tree_ex, 10)
count_ranked_pl_trees(8,4)
expected_value_function(30, 10, 2)
expected_value_function(30, 10, 1)
get_mle_1tree(tree_ex)$maximum
tree_ex_2 <- rcrp_tree(N, B, alpha)
get_mle_trees(list(tree_ex, tree_ex_2))$maximum
lrt_1tree(tree_ex)
lrt_many_trees(list(tree_ex, tree_ex_2))
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
library(CRPTree)
library(ggplot2)
set.seed(1234)
devtools::check()
usethis::use_package("R.utils")
devtools::check()
devtools::check()
devtools::build_vignettes()
devtools::check()
?NewickTree
?grepl
?permutations
?choose
?optimize
?mclapply
?simplify2array
library(devtools)
devtools::check()
devtools::check()
devtools::check()
ex_yfv <- read.nexus('inst/data/ex_yfw.txt')
ex_yfv <- read.nexus('~/inst/data/ex_yfw.txt')
ex_yfv <- read.nexus('~/Documents/CRPTree/inst/data/ex_yfw.txt')
ex_yfv <- read.nexus('/inst/data/ex_yfw.txt')
ex_yfv <- read.nexus('inst/data/ex_yfw.txt')
getwd()
ex_yfv <- read.nexus('inst/data/ex_yfw.txt')
ex_yfv <- read.nexus('inst/data/ex_yfv.txt')
ex_yfv <- read.nexus('~/Downloads/continuousTutorialFiles/YFW_RRW_cauchy.trees')
ex_yfv <- read.nexus('/Users/juliezhang/Downloads/continuousTutorialFiles/YFW_RRW_cauchy.trees')
ex_yfv <- read.nexus('/Users/juliezhang/Downloads/continuousTutorialFiles/YFV_RRW_cauchy.trees')
ex_yfv <- ex_yfv[2:101]
ex_yfv
usethis::use_data(ex_yfv)
devtools::check()
devtools::build_vignettes()
.Last.error.trace
devtools::check()
devtools::check()
devtools::check()
.Last.error.trace
library(CRPTree)
data(ex_yfv)
yfv_post <- posterior_trees_pval(ex_yfv, tree_term='Human',nperm_planar=50, nperm_labels=49, nCores=2)
colSums(yfv_post < 0.05)
colSums(yfv_post < 0.01)
median(yfv_post$S0)
colSums(yfv_post < 0.05)
colSums(yfv_post < 0.01)
median(yfv_post$S_mean)
yfv_post
yfv_post[,'S_mean']
colSums(yfv_post < 0.05)
colSums(yfv_post < 0.01)
median(yfv_post[,'S_mean'])
quantile(yfv_post[,'S_mean'], probs=c(0.025, 0.975))
ggplot(data=yfv_post,aes(pval_tree)) + geom_histogram(color='black', fill='gray') +
theme_light() + xlab('Posterior p-value') + geom_vline(xintercept=0.05, color='red') +
ggtitle('Posterior trees from Yellow fever virus samples')
library(CRPTree)
library(ggplots)
library(CRPTree)
library(ggplot2)
colSums(yfv_post < 0.05)
colSums(yfv_post < 0.01)
median(yfv_post[,'S_mean'])
quantile(yfv_post[,'S_mean'], probs=c(0.025, 0.975))
ggplot(data=yfv_post,aes(pval_tree)) + geom_histogram(color='black', fill='gray') +
theme_light() + xlab('Posterior p-value') + geom_vline(xintercept=0.05, color='red') +
ggtitle('Posterior trees from Yellow fever virus samples')
class(yfv_post)
#'
#' @param tree_list A list of ranked, planar, partially labeled trees
#' @param tree_term String specifying all tip labels containing this term are one category, and the rest form the other category
#' @param tree_tip_correspondence Matrix with two columns: first column is the tip labels of the tree, second is the category
#' @param nperm_planar Integer: number of planar permutations of the given tree
#' @param nperm_labels Integer: number of label permutations of the given tree
#' @param nCores Integer: number of parallel processes to run
#'
#' @return A matrix with the values of S_mean, pval_tree, and pval_avg for each tree
#' @export
posterior_trees_pval <- function(tree_list, tree_term, tree_tip_correspondence=NULL, nperm_planar=500, nperm_labels=499, nCores = 8) {
tree_list_processed <- lapply(tree_list, process_tree, tree_term, tree_tip_correspondence)
ntrees <- length(tree_list_processed)
tree_list_post <- t(parallel::mcmapply(one_tree_all_methods, tree_list_processed, rep(nperm_planar, ntrees),
rep(nperm_planar, ntrees), rep(nperm_labels, ntrees), mc.cores=nCores))
colnames(tree_list_post) <- c('S_mean', 'pval_tree', 'pval_avg')
tree_list_post <- as.Data.Frame(tree_list_post)
return(tree_list_post)
}
data(ex_yfv)
yfv_post <- posterior_trees_pval(ex_yfv, tree_term='Human',nperm_planar=50, nperm_labels=49, nCores=2)
yfv_post <- posterior_trees_pval(ex_yfv, tree_term='Human',nperm_planar=50, nperm_labels=49, nCores=8)
yfv_post
yfv_post$S_mean
colSums(yfv_post < 0.05)
colSums(yfv_post < 0.01)
median(yfv_post[,'S_mean'])
quantile(yfv_post[,'S_mean'], probs=c(0.025, 0.975))
ggplot(data=yfv_post,aes(pval_tree)) + geom_histogram(color='black', fill='gray') +
theme_light() + xlab('Posterior p-value') + geom_vline(xintercept=0.05, color='red') +
ggtitle('Posterior trees from Yellow fever virus samples')
class(yfv_post)
#'
#' @param tree_list A list of ranked, planar, partially labeled trees
#' @param tree_term String specifying all tip labels containing this term are one category, and the rest form the other category
#' @param tree_tip_correspondence Matrix with two columns: first column is the tip labels of the tree, second is the category
#' @param nperm_planar Integer: number of planar permutations of the given tree
#' @param nperm_labels Integer: number of label permutations of the given tree
#' @param nCores Integer: number of parallel processes to run
#'
#' @return A matrix with the values of S_mean, pval_tree, and pval_avg for each tree
#' @export
posterior_trees_pval <- function(tree_list, tree_term, tree_tip_correspondence=NULL, nperm_planar=500, nperm_labels=499, nCores = 8) {
tree_list_processed <- lapply(tree_list, process_tree, tree_term, tree_tip_correspondence)
ntrees <- length(tree_list_processed)
tree_list_post <- t(parallel::mcmapply(one_tree_all_methods, tree_list_processed, rep(nperm_planar, ntrees),
rep(nperm_planar, ntrees), rep(nperm_labels, ntrees), mc.cores=nCores))
colnames(tree_list_post) <- c('S_mean', 'pval_tree', 'pval_avg')
tree_list_post <- as.data.frame(tree_list_post)
return(tree_list_post)
}
yfv_post <- posterior_trees_pval(ex_yfv, tree_term='Human',nperm_planar=50, nperm_labels=49, nCores=8)
colSums(yfv_post < 0.05)
colSums(yfv_post < 0.01)
median(yfv_post[,'S_mean'])
quantile(yfv_post[,'S_mean'], probs=c(0.025, 0.975))
ggplot(data=yfv_post,aes(pval_tree)) + geom_histogram(color='black', fill='gray') +
theme_light() + xlab('Posterior p-value') + geom_vline(xintercept=0.05, color='red') +
ggtitle('Posterior trees from Yellow fever virus samples')
ggplot(data=yfv_post, aes(S_mean)) +
geom_histogram(color='black', fill='gray') + theme_light() + xlab('Posterior S0') +
ggtitle('Posterior trees from Yellow fever virus samples')
class(yfv_post)
yfv_post
median(yfv_post$S_mean)
colSums(yfv_post < 0.05)
colSums(yfv_post < 0.01)
median(yfv_post$S_mean)
quantile(yfv_post$S_mean, probs=c(0.025, 0.975))
ggplot(data=yfv_post,aes(pval_tree)) + geom_histogram(color='black', fill='gray') +
theme_light() + xlab('Posterior p-value') + geom_vline(xintercept=0.05, color='red') +
ggtitle('Posterior trees from Yellow fever virus samples')
ggplot(data=yfv_post, aes(S_mean)) +
geom_histogram(color='black', fill='gray') + theme_light() + xlab('Posterior S0') +
ggtitle('Posterior trees from Yellow fever virus samples')
yfv_bats_medians <- posterior_trees_bats(ex_yfv, 'Human', n_bats = 50, nperm_obs = 50, nCores= 2)
yfv_bats_medians <- posterior_trees_bats(ex_yfv, 'Human', n_bats = 50, nperm_obs = 50, nCores= 8)
summary(yfv_bats_medians)
quantile(yfv_bats_medians, probs=c(0.025, 0.975))
devtools::build_vignettes()
devtools::check()
library(devtools)
devtools::check()
devtools::check()
